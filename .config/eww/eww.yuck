; (defwidget bar []
;   (centerbox :orientation "h"
;     (workspaces)
;     (music)
;     (sidestuff)))
;
; (defwidget sidestuff []
;   (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
;     (metric :label "üîä"
;             :value volume
;             :onchange "amixer -D pulse sset Master {}%")
;     (metric :label "Ô°ö"
;             :value {EWW_RAM.used_mem_perc}
;             :onchange "")
;     (metric :label "üíæ"
;             :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
;             :onchange "")
;     time))
;
; (defwidget workspaces []
;   (box :class "workspaces"
;        :orientation "h"
;        :space-evenly true
;        :halign "start"
;        :spacing 10
;     (button :onclick "wmctrl -s 0" 1)
;     (button :onclick "wmctrl -s 1" 2)
;     (button :onclick "wmctrl -s 2" 3)
;     (button :onclick "wmctrl -s 3" 4)
;     (button :onclick "wmctrl -s 4" 5)
;     (button :onclick "wmctrl -s 5" 6)
;     (button :onclick "wmctrl -s 6" 7)
;     (button :onclick "wmctrl -s 7" 8)
;     (button :onclick "wmctrl -s 8" 9)))
;
; (defwidget music []
;   (box :class "music"
;        :orientation "h"
;        :space-evenly false
;        :halign "center"
;     {music != "" ? "üéµ${music}" : ""}))
;
;
; (defwidget metric [label value onchange]
;   (box :orientation "h"
;        :class "metric"
;        :space-evenly false
;     (box :class "label" label)
;     (scale :min 0
;            :max 101
;            :active {onchange != ""}
;            :value value
;            :onchange onchange)))
;
;
;
; (deflisten music :initial ""
;   "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
;
; (defpoll volume :interval "1s"
;   "scripts/getvol")
;
; (defpoll time :interval "10s"
;   "date '+%H:%M %b %d, %Y'")
;
; (defwindow bar
;   :monitor 0
;   :windowtype "dock"
;   :geometry (geometry :x "0%"
;                       :y "0%"
;                       :width "90%"
;                       :height "10px"
;                       :anchor "top center")
;   :reserve (struts :side "top" :distance "4%")
;   (bar))
;

(defwindow dock
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore false
  :geometry (geometry :height "1.5%")
  (dock_layout))

(defwidget dock_layout []
  (box :space-evenly true :orientation "horizontal"
    (button :onclick "eww open dashboard" :class "close-btn" "ÔôÇ")
    (_dock_time)))

(defwidget _dock_time []
  (eventbox :onhover "eww update date=true"
            :onhoverlost "eww update date=false"
    (box :halign "end"
      (revealer :transition "slideleft" :reveal date :duration "500ms"
        (label :text "${fulldate.day} ${fulldate.month} ${fulldate.year}"))
      (label :text "${time.hour}:${time.min}"))))
(defvar date false)


(defvar WS '{"ws1": [{"name": "1", "icon": "Ôàô", "status": "occupied"},
                     {"name": "2", "icon": "Ôàô", "status": "empty"},
                     {"name": "3", "icon": "Ôàô", "status": "focused"}],
             "ws2": [{"name": "4", "icon": "Ôàô", "status": "empty"},
                     {"name": "5", "icon": "Ôàô", "status": "occupied"},
                     {"name": "6", "icon": "Ôàô", "status": "urgent"}],
             "focused": "3"}')
(defwidget _dock_workspace []
    (box :class "ws"
       :orientation "vertical"
       :space-evenly false
    (small-wss :wss "${WS.ws1}")
    (small-wss :wss "${WS.ws2}")
    (big-ws :focused-ws "${WS.focused}")))
(defwidget small-wss [wss]
  (box
    :class "small-wss"
    :hexpand false
    :vexpand false
    (for ws in wss
      (small-ws :ws ws))))

(defwidget small-ws [ws]
  (eventbox
    :cursor "hand"
    (button
      :onclick "i3-msg workspace ${ws.name}"
      (label
        :class "small-ws status-${ws.status}"
        :text "${ws.icon}"))))

(defwidget big-ws [focused-ws]
  (box
    :class "big-ws"
    :hexpand false
    :vexpand false
    :height "50"
    :width "50"

    (label
      :text "${focused-ws}")))


(defwindow dashboard
  :stacking "fg"
  :windowtype "normal"
  :wm-ignore true
  :geometry (geometry :width "100%" :height "100%")
  (dashboard_layout))

(defpoll time :interval "5s"
  :initial `date +'{"hour":"%H","min":"%M"}'`
  `date +'{"hour":"%H","min":"%M"}'`)
(defpoll fulldate :interval "5s"
  :initial `date +'{"day":"%d","month":"%h","year":"%Y","hour":"%H","min":"%M"}'`
  `date +'{"day":"%d","month":"%h","year":"%Y","hour":"%H","min":"%M"}'`)

(defpoll net :interval "100s"
  :initial `N/A`
  `nmcli -t -f SIGNAL,ACTIVE device wifi \
    | awk -F':' '{if($2=="yes")print$1}'`)

(defwidget dashboard_layout []
  (box :class "layout-box" :space-evenly false :orientation "vertical"
       :style "background-image: url('./wallpaper')"
    (button :onclick "eww close dashboard" :class "close-btn" "ÔôÇ")
    (box :class "layout-box layout-container" :space-evenly false :orientation "vertical"
         :hexpand true :vexpand true
      (box :valign "start" :space-evenly false :spacing 25
        (_sundial)
        (_battery :status {EWW_BATTERY.BAT0.status}
                  :battery {EWW_BATTERY.BAT0.capacity}
                  :charge "Ó∫∂" :one "ÔãÜ" :two "Ó∫≤" :three "Ó∫≥" :four "Ó∫µ"
                  :five "Ó∫¥" :six "Ó∫±" :seven "Ôãè")
        (_network :strength net :offline "Ôå•" :excellent "Ôåü" :good "Ôå†"
                  :okay "Ôå¢" :slow "Ôå°")
        (label :text "|" :class "sep"))
      (box :space-evenly false :hexpand true :vexpand true
        (box :spacing 15 :class "tm-box" :space-evenly false
             :valign "end" :halign "start"
          (label :text "Ôóé")
          (label :text "${time.hour}  ${time.min}"))
        (_buttons :shutdown "poweroff" :reboot "reboot"
                  :logout "loginctl kill-session self"
                  :shutdown_icon "Ô§§ Shutdown" :reboot_icon "Ô•è Reboot"
                  :logout_icon "Ô†â  Logout"))
      )
    ))

(defwidget _battery [battery status one two three
                    four five six seven charge]
  (box :class "bat-box" :space-evenly false :spacing 8
    (label :text {status == 'Charging' ? charge :
      battery < 15 ? seven :
        battery < 30 ? six :
          battery < 45 ? five :
            battery < 60 ? four :
              battery < 75 ? three :
                battery < 95 ? two : one})))

(defwidget _network [strength offline excellent
                    good okay slow]
  (box :class "net-box"
       :space-evenly false
       :spacing 8
    (label :text {strength == "" ? offline :
      strength < 26 ? slow :
        strength < 51 ? okay :
          strength < 76 ? good : excellent})))

(defwidget _buttons [shutdown shutdown_icon reboot
                    reboot_icon logout logout_icon]
  (box :class "btns-box" :spacing 5
       :vexpand true :hexpand true
       :valign "end" :halign "end"
       :space-evenly false
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)
    (button :onclick logout logout_icon)))

(defwidget _sundial []
  (label :class "sundial-lbl" :halign "end" :hexpand true
         :text {time.hour >= 2 && time.hour <= 4 ? "Early Morning" :
               time.hour <= 5 ? "Dawn" :
               time.hour >= 6
                && (time.hour <= 8 && time.min <= 59)
                  ? "Morning" :
               time.hour >= 9
                 && (time.hour <= 11 && time.min <= 59)
                   ? "Late Morning" :
               time.hour == 12 && time.min <= 29
                 ? "Midday" :
               time.hour >= 12 && time.hour <= 16
                 ? "Afternoon" :
               time.hour > 16 && time.hour <= 17
                 ? "Late Afternoon" :
               (time.hour >= 17 && time.min <= 1)
                 || (time.hour <= 18 && time.min <= 20)
                   ? "Early Evening" :
               time.hour >= 18 && time.hour <= 19
                 ? "Dusk" :
               time.hour > 19 && time.hour <= 21
                 ? "Late Evening" :
               time.hour > 21 ? "Night" : "Midnight"}))

;; vim:ft=yuck

